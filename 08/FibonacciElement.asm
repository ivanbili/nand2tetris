  @256
  D=A
  @SP
  M=D
  @LBL0.
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
  @LCL
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @ARG
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THIS
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THAT
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @SP
  D=M
  @5
  D=D-A
  @0
  D=D-A
  @ARG
  M=D
  @SP
  D=M
  @LCL
  M=D
  @Sys.init
  0;JMP
(LBL0.)
// // This file is part of www.nand2tetris.org
// // and the book "The Elements of Computing Systems"
// // by Nisan and Schocken, MIT Press.
// // File name: projects/08/FunctionCalls/FibonacciElement/Main.vm
// 
// // Computes the n'th element of the Fibonacci series, recursively.
// // n is given in argument[0].  Called by the Sys.init function 
// // (part of the Sys.vm file), which also pushes the argument[0] 
// // parameter before this code starts running.
// 
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
  @0
  D=A
  @ARG
  A=D+M
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
// push constant 2
  @2
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
// lt                     // checks if n<2
  @SP
  M=M-1
  A=M-1
  D=M
  M=-1
  A=A+1
  D=D-M
  @LBL0.Main
  D;JLT
  @SP
  A=M-1
  M=0
(LBL0.Main)
// if-goto IF_TRUE
  @SP
  M=M-1
  A=M
  D=M
  @IF_TRUE
  D;JNE
// goto IF_FALSE
  @IF_FALSE
  0;JMP
// label IF_TRUE          // if n<2, return n
(IF_TRUE)
// push argument 0        
  @0
  D=A
  @ARG
  A=D+M
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
// return
  @LCL
  D=M
  @R13
  M=D
  @5
  A=D-A
  D=M
  @R14
  M=D
  @SP
  M=M-1
  A=M
  D=M
  @ARG
  A=M
  M=D
  @ARG
  D=M+1
  @SP
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @THAT
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @THIS
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @ARG
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @LCL
  M=D
  @R14
  A=M
  0;JMP
// label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE)
// push argument 0
  @0
  D=A
  @ARG
  A=D+M
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
// push constant 2
  @2
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
// sub
  @SP
  M=M-1
  A=M
  D=M
  A=A-1
  D=M-D
  M=D
// call Main.fibonacci 1  // computes fib(n-2)
  @LBL1.Main
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
  @LCL
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @ARG
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THIS
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THAT
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @SP
  D=M
  @5
  D=D-A
  @1
  D=D-A
  @ARG
  M=D
  @SP
  D=M
  @LCL
  M=D
  @Main.fibonacci
  0;JMP
(LBL1.Main)
// push argument 0
  @0
  D=A
  @ARG
  A=D+M
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
// push constant 1
  @1
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
// sub
  @SP
  M=M-1
  A=M
  D=M
  A=A-1
  D=M-D
  M=D
// call Main.fibonacci 1  // computes fib(n-1)
  @LBL1.Main
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
  @LCL
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @ARG
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THIS
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THAT
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @SP
  D=M
  @5
  D=D-A
  @1
  D=D-A
  @ARG
  M=D
  @SP
  D=M
  @LCL
  M=D
  @Main.fibonacci
  0;JMP
(LBL1.Main)
// add                    // returns fib(n-1) + fib(n-2)
  @SP
  M=M-1
  A=M
  D=M
  A=A-1
  D=M+D
  M=D
// return
  @LCL
  D=M
  @R13
  M=D
  @5
  A=D-A
  D=M
  @R14
  M=D
  @SP
  M=M-1
  A=M
  D=M
  @ARG
  A=M
  M=D
  @ARG
  D=M+1
  @SP
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @THAT
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @THIS
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @ARG
  M=D
  @R13
  M=M-1
  A=M
  D=M
  @LCL
  M=D
  @R14
  A=M
  0;JMP
// // This file is part of www.nand2tetris.org
// // and the book "The Elements of Computing Systems"
// // by Nisan and Schocken, MIT Press.
// // File name: projects/08/FunctionCalls/FibonacciElement/Sys.vm
// 
// // Pushes a constant, say n, onto the stack, and calls the Main.fibonacii
// // function, which computes the n'th element of the Fibonacci series.
// // Note that by convention, the Sys.init function is called "automatically" 
// // by the bootstrap code.
// 
// function Sys.init 0
(Sys.init)
// push constant 4
  @4
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
// call Main.fibonacci 1   // computes the 4'th fibonacci element
  @LBL1.Sys
  D=A
  @SP
  M=M+1
  A=M-1
  M=D
  @LCL
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @ARG
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THIS
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @THAT
  D=M
  @SP
  M=M+1
  A=M-1
  M=D
  @SP
  D=M
  @5
  D=D-A
  @1
  D=D-A
  @ARG
  M=D
  @SP
  D=M
  @LCL
  M=D
  @Main.fibonacci
  0;JMP
(LBL1.Sys)
// label WHILE
(WHILE)
// goto WHILE              // loops infinitely
  @WHILE
  0;JMP
